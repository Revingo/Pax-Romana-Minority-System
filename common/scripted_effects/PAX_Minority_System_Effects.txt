#########################################################################################################
# This script has been done by Damn.Broh! You can reuse it without asking, just credit him!
#########################################################################################################

# This effect creates a story cycle inside a random ruler. It is not important the ruler as the story cycle is used as a very symple structure.
# This one has two variables assigned to hit: culture, which liks to a culture scope and amount, which links to a floating point value that represents the percentage of that culture inside the county.
# Then it adds the story cycle to the variable list of the county
culture_story_cycle_create = {
	random_ruler = {

		create_story = {
			type = minority_system_story_cycle
			save_scope_as = new_culture_story_cycle	
		}

		scope:new_culture_story_cycle = {
			set_variable = {
				name = culture
				value = $CULTURE$
			}
	
			set_variable = {
				name = amount
				value = $AMOUNT$
			}
		}

		$COUNTY$ = {
			add_to_variable_list = {
				name = culture_minorities
				target = scope:new_culture_story_cycle
			}
		}
	}
}

# Same as culture_story_cycle_create but with the faith variable instead of the culture variable, which links to a faith scope
faith_story_cycle_create = {
	random_ruler = {

		create_story = {
			type = minority_system_story_cycle
			save_scope_as = new_faith_story_cycle	
		}

		scope:new_faith_story_cycle = {
			set_variable = {
				name = faith
				value = $FAITH$
			}
	
			set_variable = {
				name = amount
				value = $AMOUNT$
			}
		}

		$COUNTY$ = {
			add_to_variable_list = {
				name = faith_minorities
				target = scope:new_faith_story_cycle
			}
		}
	}
}

# This effect is used to change the value variable of a culture story cycle
change_value_of_culture_in_list = {
	#$COUNTY$ = {
		every_in_list = {
			variable = culture_minorities

			limit = {
				this.var:culture = $CULTURE$
			}

			change_variable = {
				name = amount
				add = $AMOUNT$
			}
		}
	#}
}

# Same as change_value_of_culture_in_list but for faiths
change_value_of_faith_in_list = {
	#$COUNTY$ = {
		every_in_list = {
			variable = faith_minorities

			limit = {
				this.var:faith = $FAITH$
			}

			change_variable = {
				name = amount
				add = $AMOUNT$
			}
		}
	#}
}

# This effect removes the story cycle with the culture variable given as input from the culture_minorities list
remove_culture_in_list = {
	$COUNTY$ = {
		every_in_list = {
			variable = culture_minorities

			limit = {
				this.var:culture = $CULTURE$
			}

			save_scope_as = to_remove_story_cycle

			prev = {
				remove_list_variable = {
					name = culture_minorities
					target = scope:to_remove_story_cycle
				}
			}
		}
	}
}

# This effect removes the story cycle with the faith variable given as input from the faith_minorities list
remove_faith_in_list = {
	$COUNTY$ = {
		every_in_list = {
			variable = faith_minorities

			limit = {
				this.var:faith = $FAITH$
			}

			save_scope_as = to_remove_story_cycle

			prev = {
				remove_list_variable = {
					name = faith_minorities
					target = scope:to_remove_story_cycle
				}
			}
		}
	}
}

# This effect checks if the a story cycle with the given culture is already in list. If that the case, then it changes it's amount variable
# using the amount given as input. If there is no story cycle of the given culture in list, then it creates a new one with the amount given as input
START_GAME_culture_story_cycle_create = {
	$COUNTY$ = {
		if = {
			limit = {
				culture_is_already_in_list = {
					#COUNTY = $COUNTY$
					CULTURE = $CULTURE$
				}
			}

			change_value_of_culture_in_list = {
				#COUNTY = $COUNTY$
				CULTURE = $CULTURE$
				AMOUNT = $AMOUNT$
			}
		}
		else = {
			culture_story_cycle_create = {
				COUNTY = $COUNTY$
				CULTURE = $CULTURE$
				AMOUNT = $AMOUNT$
			}
		}
	}
}

# Same as START_GAME_culture_story_cycle_create but for faiths
START_GAME_faith_story_cycle_create = {
	$COUNTY$ = {
		if = {
			limit = {
				faith_is_already_in_list = {
					#COUNTY = $COUNTY$
					FAITH = $FAITH$
				}
			}

			change_value_of_faith_in_list = {
				#COUNTY = $COUNTY$
				FAITH = $FAITH$
				AMOUNT = $AMOUNT$
			}
		}
		else = {
			faith_story_cycle_create = {
				COUNTY = $COUNTY$
				FAITH = $FAITH$
				AMOUNT = $AMOUNT$
			}
		}
	}
}

# This effect makes sure that the sum of all the amount variables of the story cycles inside the culture_minorities list is not less or more then 100
# Then uses another effect to remove any story cycle with an amount variable with a value lower than 1
fix_culture_list = {
	save_scope_as = county_to_fix

	small_culture_minorities_remover = yes

	set_variable = {
		name = total_to_add
		value = 100.0
	}

	every_in_list = {
		variable = culture_minorities

		save_scope_as = current_story_cycle

		scope:county_to_fix = {
			change_variable = {
				name = total_to_add
				subtract = scope:current_story_cycle.var:amount
			}
		}
	}

	if = {
		limit = { NOT = { var:total_to_add = 0 } }

		random_in_list = {
			variable = culture_minorities
	
			change_variable = {
				name = amount
				add = scope:county_to_fix.var:total_to_add
			}
		}
	}

	remove_variable = total_to_add

	small_culture_minorities_remover = yes
}

# Same as fix_culture_list but for faiths
fix_faith_list = {
	save_scope_as = county_to_fix

	small_faith_minorities_remover = yes

	set_variable = {
		name = total_to_add
		value = 100
	}

	every_in_list = {
		variable = faith_minorities

		save_scope_as = current_story_cycle

		scope:county_to_fix = {
			change_variable = {
				name = total_to_add
				subtract = scope:current_story_cycle.var:amount
			}
		}
	}

	if = {
		limit = { NOT = { var:total_to_add = 0 } }

		random_in_list = {
			variable = faith_minorities
	
			change_variable = {
				name = amount
				add = scope:county_to_fix.var:total_to_add
			}
		}
	}

	remove_variable = total_to_add

	small_faith_minorities_remover = yes
}

# This effect is the backbone of the Minority System. It adds (or decreases) any culture and amount given as input to the culture_minorities list. It automatically changes all
# the amount of the other story cycles to make sure that their sum is no more or less than 100. Uses the fix_culture_list effect aswell and checks if with all of these changes
# the new dominat culture of the county has changed. If that's the case, it changes it.
clever_culture_add = {
	save_scope_as = county_add

	set_variable = {
		name = clever_counter
		value = 0
	}

	every_in_list = {
		variable = culture_minorities

		scope:county_add = {
			change_variable = {
				name = clever_counter
				add = 1
			}
		}
	}

	if = {
		limit = {
			AND = {
				culture_is_already_in_list = {
					#COUNTY = $COUNTY$
					CULTURE = $CULTURE$
				}

				var:clever_counter > 1
			}
			
		}

		change_value_of_culture_in_list = {
			#COUNTY = $COUNTY$
			CULTURE = $CULTURE$
			AMOUNT = $AMOUNT$
		}

		set_variable = {
			name = clever_subtract
			value = {
				value = $AMOUNT$
				divide = {
					value = var:clever_counter
					subtract = 1
				}
			}
		}

		every_in_list = {
			variable = culture_minorities
	
			limit = { NOT = { var:culture = $CULTURE$ } }

			change_variable = {
				name = amount
				subtract = scope:county_add.var:clever_subtract
			}
		}

		remove_variable = clever_subtract
	}
	else_if = {

		limit = {
			NOT = {
				culture_is_already_in_list = {
					#COUNTY = $COUNTY$
					CULTURE = $CULTURE$
				}
			}
		}

		culture_story_cycle_create = {
			COUNTY = scope:county_add
			CULTURE = $CULTURE$
			AMOUNT = $AMOUNT$
		}

		every_in_list = {
			variable = culture_minorities

			save_scope_as = current_county_amount_edit
	
			limit = { NOT = { var:culture = $CULTURE$ } }
	
			scope:county_add = {
				set_variable = {
					name = clever_subtract
					value = {
						value = scope:current_county_amount_edit.var:amount
						multiply = $AMOUNT$
						divide = 100
					}
				}
			}

			change_variable = {
				name = amount
				subtract = scope:county_add.var:clever_subtract
			}

			scope:county_add = {
				remove_variable = clever_subtract
			}
		}
	}

	fix_culture_list = yes

	remove_variable = clever_counter

	change_dominant_culture = yes
}

# Same as clever_culture_add but for faiths
clever_faith_add = {
	save_scope_as = county_add

	set_variable = {
		name = clever_counter
		value = 0
	}

	every_in_list = {
		variable = faith_minorities

		scope:county_add = {
			change_variable = {
				name = clever_counter
				add = 1
			}
		}
	}

	if = {
		limit = {
			AND = {
				faith_is_already_in_list = {
					#COUNTY = $COUNTY$
					FAITH = $FAITH$
				}

				var:clever_counter > 1
			}
		}

		change_value_of_faith_in_list = {
			#COUNTY = $COUNTY$
			FAITH = $FAITH$
			AMOUNT = $AMOUNT$
		}

		set_variable = {
			name = clever_subtract
			value = {
				value = $AMOUNT$
				divide = {
					value = var:clever_counter
					subtract = 1
				}
			}
		}

		every_in_list = {
			variable = faith_minorities
	
			limit = { NOT = { var:faith = $FAITH$ } }

			change_variable = {
				name = amount
				subtract = scope:county_add.var:clever_subtract
			}
		}

		remove_variable = clever_subtract
	}
	else_if = {
		limit = {
			NOT = {
				faith_is_already_in_list = {
					#COUNTY = $COUNTY$
					FAITH = $FAITH$
				}
			}
		}

		faith_story_cycle_create = {
			COUNTY = scope:county_add
			FAITH = $FAITH$
			AMOUNT = $AMOUNT$
		}

		every_in_list = {
			variable = faith_minorities
	
			save_scope_as = current_county_amount_edit
	
			limit = { NOT = { var:faith = $FAITH$ } }
	
			scope:county_add = {
				set_variable = {
					name = clever_subtract
					value = {
						value = scope:current_county_amount_edit.var:amount
						multiply = $AMOUNT$
						divide = 100
					}
				}
			}

			change_variable = {
				name = amount
				subtract = scope:county_add.var:clever_subtract
			}

			scope:county_add = {
				remove_variable = clever_subtract
			}
		}
	}

	fix_faith_list = yes

	remove_variable = clever_counter

	change_dominant_faith = yes
}

# This effect checks if the Dominant Culture of the county should be changed or not. If it should, then it changes it with the correct one.
# Sometimes the game changes the culture of the county throught events and decisions though, so instead of changing every single one of those instances,
# it automatically detects the error, logs it to the error log and solves it, using part of the clever_culture_add effect to add that culture to the
# culture_minorities list.
change_dominant_culture = {
	save_scope_as = county_dominant_to_change

	# random_in_list should work better but for some reason sometimes it doesn't, so I'm using every_in_list instead even if it is way less efficient
	every_in_list = {
		variable = culture_minorities

		limit = { scope:county_dominant_to_change.culture = this.var:culture }

		save_scope_as = highest_story_culture

		scope:county_dominant_to_change = {
			set_variable = {
				name = highest_culture
				value = scope:highest_story_culture
			}
		}
	}

	if = {
		limit = { has_variable = highest_culture }

		every_in_list = {
			variable = culture_minorities
	
			save_scope_as = current_culture
	
			limit = { this.var:amount > scope:county_dominant_to_change.var:highest_culture.var:amount }
	
			scope:county_dominant_to_change = {
				remove_variable = highest_culture
	
				set_variable = {
					name = highest_culture
					value = scope:current_culture
				}
			}
		}
	
		if = {
			limit = { NOT = { this.var:highest_culture.var:culture = culture  } }
	
			set_county_culture = this.var:highest_culture.var:culture
		}
	
		remove_variable = highest_culture
	}
	else = {
		error_log = "highest culture variable is not set! This should not be happening!"

		#####################################################################################
		# START OF CLEVER_CULTURE_ADD COPIED SECTION
		#####################################################################################

		culture = {
			save_scope_as = county_culture
		}

		set_variable = {
			name = clever_counter
			value = 0
		}
	
		every_in_list = {
			variable = culture_minorities
	
			scope:county_dominant_to_change = {
				change_variable = {
					name = clever_counter
					add = 1
				}
			}
		}
	
		culture_story_cycle_create = {
			COUNTY = scope:county_dominant_to_change
			CULTURE = scope:county_culture
			AMOUNT = 65
		}
	
		every_in_list = {
			variable = culture_minorities
	
			save_scope_as = current_county_amount_edit
		
			limit = { NOT = { var:culture = scope:county_culture } }
		
			scope:county_dominant_to_change = {
				set_variable = {
					name = clever_subtract
					value = {
						value = scope:current_county_amount_edit.var:amount
						multiply = 50
						divide = 100
					}
				}
			}
	
			change_variable = {
				name = amount
				subtract = scope:county_dominant_to_change.var:clever_subtract
			}
	
			scope:county_dominant_to_change = {
				remove_variable = clever_subtract
			}
		}
		
		fix_culture_list = yes
	
		remove_variable = clever_counter

		# I've copied clever_culture_add here because I had to avoid recursion as it would end up in an infinite loop, but this is not a problem for neighboring counties

		neighboring_counties_new_culture = {
			CULTURE = scope:county_culture
		}

		#####################################################################################
		# END OF CLEVER_CULTURE_ADD COPIED SECTION
		#####################################################################################

		error_log = "Added not tracked culture. THIS SHOULD NOT BE HAPPENING!"
	}
}

# Same as change_dominant_culture but for faiths
change_dominant_faith = {
	save_scope_as = county_dominant_to_change

	# random_in_list should work better but for some reason sometimes it doesn't, so I'm using every_in_list instead even if it is way less efficient
	every_in_list = {
		variable = faith_minorities

		limit = { scope:county_dominant_to_change.faith = this.var:faith }

		save_scope_as = highest_story_faith

		scope:county_dominant_to_change = {
			set_variable = {
				name = highest_faith
				value = scope:highest_story_faith
			}
		}
	}

	if = {
		limit = { has_variable = highest_faith }

		every_in_list = {
			variable = faith_minorities
	
			save_scope_as = current_faith
	
			limit = { this.var:amount > scope:county_dominant_to_change.var:highest_faith.var:amount }
	
			scope:county_dominant_to_change = {
				remove_variable = highest_faith
	
				set_variable = {
					name = highest_faith
					value = scope:current_faith
				}
			}
		}
	
		if = {
			limit = { NOT = { this.var:highest_faith.var:faith = faith  } }
	
			set_county_faith = this.var:highest_faith.var:faith
		}
	
		remove_variable = highest_faith
	}
	else = {
		error_log = "highest faith variable is not set! This should not be happening!"

		#####################################################################################
		# START OF CLEVER_FAITH_ADD COPIED SECTION
		#####################################################################################

		faith = {
			save_scope_as = county_faith
		}

		set_variable = {
			name = clever_counter
			value = 0
		}
	
		every_in_list = {
			variable = faith_minorities
	
			scope:county_dominant_to_change = {
				change_variable = {
					name = clever_counter
					add = 1
				}
			}
		}
	
		faith_story_cycle_create = {
			COUNTY = scope:county_dominant_to_change
			FAITH = scope:county_faith
			AMOUNT = 65
		}
	
		every_in_list = {
			variable = faith_minorities
		
			save_scope_as = current_county_amount_edit
		
			limit = { NOT = { var:faith = scope:county_faith } }
		
			scope:county_dominant_to_change = {
				set_variable = {
					name = clever_subtract
					value = {
						value = scope:current_county_amount_edit.var:amount
						multiply = 50
						divide = 100
					}
				}
			}
	
			change_variable = {
				name = amount
				subtract = scope:county_dominant_to_change.var:clever_subtract
			}
	
			scope:county_dominant_to_change = {
				remove_variable = clever_subtract
			}
		}
	
		fix_faith_list = yes
	
		remove_variable = clever_counter

		# I've copied clever_faith_add here because I had to avoid recursion as it would end up in an infinite loop, but this is not a problem for neighboring counties

		neighboring_counties_new_faith = {
			FAITH = scope:county_faith
		}

		#####################################################################################
		# END OF CLEVER_FAITH_ADD COPIED SECTION
		#####################################################################################

		error_log = "Added not tracked faith. THIS SHOULD NOT BE HAPPENING!"
	}
}

# If a culture has an amount that is less than 1, then this effect removes it from the culture_minorities list
small_culture_minorities_remover = {
	save_scope_as = county_small_minorities_remove

	every_in_list = {
		variable = culture_minorities

		save_scope_as = small_minority

		limit = { var:amount < 1}

		random_in_list = {
			variable = culture_minorities

			limit = { NOT = { scope:small_minority.var:culture = var:culture } }

			change_variable = {
				name = amount
				add = scope:small_minority.var:amount
			}
		}

		scope:county_small_minorities_remove = {
			add_to_variable_list = {
				name = small_minorities
				target = scope:small_minority
			}
		}
	}

	if = {
		limit = { has_variable_list = small_minorities }

		every_in_list = {
			variable = small_minorities

			save_scope_as = to_remove

			scope:county_small_minorities_remove = {
				remove_list_variable = {
					name = culture_minorities
					target = scope:to_remove
				}
			}
		}

		clear_variable_list = small_minorities
	}
}

# Same as small_culture_minorities_remover but for faiths
small_faith_minorities_remover = {
	save_scope_as = county_small_minorities_remove

	every_in_list = {
		variable = faith_minorities

		save_scope_as = small_minority

		limit = { var:amount < 1}

		random_in_list = {
			variable = faith_minorities

			limit = { NOT = { scope:small_minority.var:faith = var:faith } }

			change_variable = {
				name = amount
				add = scope:small_minority.var:amount
			}
		}

		scope:county_small_minorities_remove = {
			add_to_variable_list = {
				name = small_minorities
				target = scope:small_minority
			}
		}
	}

	if = {
		limit = { has_variable_list = small_minorities }

		every_in_list = {
			variable = small_minorities

			save_scope_as = to_remove

			scope:county_small_minorities_remove = {
				remove_list_variable = {
					name = faith_minorities
					target = scope:to_remove
				}
			}
		}

		clear_variable_list = small_minorities
	}
}

# This effect is used to simulate cultural emigration from a county to another. It removes the specified amount of a culture in the culture_minorities list
# and adds it to the neicghboring realm's counties with another specified amount.
realm_culture_emigration = {

	every_realm_county = {
		clever_culture_add = {
			CULTURE = $CULTURE$
			AMOUNT = $AMOUNT$
		}
	}
	
	every_character_to_title_neighboring_county = {
		clever_culture_add = {
			CULTURE = $CULTURE$
			AMOUNT = $EMIGRATION_AMOUNT$
		}
	}
}

# Adds a small amount of a newly created culture to all the counties neighboring them
neighboring_counties_new_culture = {

	every_neighboring_county = {
		limit = {
			NOT = {
				OR = {
					this.culture = $CULTURE$

					culture_is_already_in_list = {
						CULTURE = $CULTURE$
					}
				}
			}
		}

		clever_culture_add = {
			CULTURE = $CULTURE$
			AMOUNT = 20
		}
	}
}

# Same as neighboring_counties_new_culture but for faiths
neighboring_counties_new_faith = {

	every_neighboring_county = {
		limit = {
			NOT = {
				OR = {
					this.faith = $FAITH$

					faith_is_already_in_list = {
						FAITH = $FAITH$
					}
				}
			}
		}

		clever_faith_add = {
			FAITH = $FAITH$
			AMOUNT = 20
		}
	}
}